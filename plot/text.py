"""
This module contains functions for plotting
attributions on text data.
"""
import altair as alt
import numpy as np
import pandas as pd
import string

def _string_width(st):
    """
    Returns the visual width (in pixels) of a string
    when displayed in arial 12pt font (roughly).
    """
    size = 0
    for s in st:
        if s in 'lij|\' ': size += 37
        elif s in '![]fI.,:;/\\t': size += 50
        elif s in '`-(){}r"': size += 60
        elif s in '*^zcsJkvxy': size += 85
        elif s in 'aebdhnopqug#$L+<>=?_~FZT' + string.digits: size += 95
        elif s in 'BSPEAKVXY&UwNRCHD': size += 112
        elif s in 'QGOMm%W@': size += 135
        else: size += 50
    return size * 6 / 1000.0

def text_plot(tokens,
              attributions,
              non_zero_mask=None,
              include_grid=False,
              reverse_scheme=True,
              include_legend=False,
              strip_special=True):
    """
    Plots text such that the color of the text is based its
    attribution value.

    Args:
        tokens: Tokens generated by decoding ids.
        attributions: Token-level attributions.
        non_zero_mask: Optional mask to index tokens by.
        include_grid: You want this set to false. Trust me.
        reverse_scheme: Set to True to reverse the color scheme.
        include_legend: Set to True to display a color legend.
        strip_special: Set to True to strip the first and last non-zero token.
    """
    if non_zero_mask is not None:
        tokens = np.array(tokens)[non_zero_mask]
        attributions = attributions[non_zero_mask]

    if strip_special:
        tokens = tokens[1:-1]
        attributions = attributions[1:-1]

    joined_attributions = []
    joined_tokens = []
    current_string = ''
    current_attribution = 0
    found_special = False
    add_last = False
    for i in range(len(tokens)):
        token = tokens[i]
        attr  = attributions[i]
        add_last = False
        if token.startswith('##'):
            current_string += token[2:]
            current_attribution += attr
        elif token == "'" or token == "-":
            current_string += token
            current_attribution += attr
            found_special = True
        elif current_string == '' or found_special:
            current_string += token
            current_attribution += attr
            found_special = False
        else:
            joined_tokens.append(current_string)
            joined_attributions.append(current_attribution)
            current_string = token
            current_attribution = attr
            add_last = True
    if add_last:
        joined_tokens.append(current_string)
        joined_attributions.append(current_attribution)

    data = pd.DataFrame({
        'Token': joined_tokens,
        'Attributions': joined_attributions
    })

    sort = 'descending'
    if reverse_scheme:
        sort = 'ascending'

    legend = None
    if include_legend:
        legend = alt.Legend(orient='bottom')

    lengths = [_string_width(token + ' ') for token in data['Token']]
    cumulative_lengths = np.cumsum(lengths)
    data['x'] = [0] + list(cumulative_lengths[0:-1])
    data['size'] = np.abs(data['Attributions'])
    base_width = 22 * np.sum(lengths)
    max_abs_attr = np.max(np.abs(data['Attributions']))
    text = alt.Chart(data, width=base_width).mark_text(align='left',
                                                       size=20,
                                                       color='black',
                                                       font='arial').encode(
        x=alt.X('x:Q', sort=None, axis=None),
        y=alt.value(0),
        text=alt.Text('Token:N'),
        color=alt.Color('Attributions:Q',
                        legend=legend,
                        scale=alt.Scale(scheme='redyellowgreen',
                                        domain=[-max_abs_attr,
                                                max_abs_attr]),
                        sort=sort)
    )
    if not include_grid:
        text = text.configure_view(opacity=0.0)
    return text